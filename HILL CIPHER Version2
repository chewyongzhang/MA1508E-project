import numpy  as np
from numpy.linalg import *
import random
import json


W_to_N={'A':0,'B':1,'C':2,'D':3,'E':4,'F':5,'G':6,'H':7,'I':8,'J':9,'K':10,'L':11,'M':12,'N':13,'O':14,'P':15,'Q':16,'R':17,'S':18,'T':19,'U':20,'V':21,'W':22,'X':23,'Y':24,'Z':25}
N_to_W={0:'A',1:'B',2:'C',3:'D',4:'E',5:'F',6:'G',7:'H',8:'I',9:'J',10:'K',11:'L',12:'M',13:'N',14:'O',15:'P',16:'Q',17:'R',18:'S',19:'T',20:'U',21:'V',22:'W',23:'X',24:'Y',25:'Z'}
Key_Matrices = {}

def Det(m):
      d=det(m)
      return(d)

def Inv(n):
      arr_i=np.array(n)
      i=inv(arr_i)
      return(i)

def Read(x):
      KEY_MATRIX=[]
      ROW_K=[]
      x=x.split( ';' )
      order=len(x)
      for i in range(order):
            row=x[i].split( ',' )
            for j in range(len(row)):
                  ROW_K.append(int(row[j]))
            KEY_MATRIX.append(ROW_K)
            ROW_K=[]
      return (KEY_MATRIX)
    
def KMatrix_Generator(no_letters):
    det = 0
    while det == 0:
        KEY_MATRIX = np.random.randint(10, size=(no_letters,no_letters))#Order = no_letters
        det = Det(KEY_MATRIX)
    Key_Matrices[no_letters] = KEY_MATRIX.tolist()
    return KEY_MATRIX
    
def Encrypt():
    
    Encryption_result=''    
    Text = input('What do you want to encrypt:')
    text = Text.split()
    file_name = input("how do you want to name your key matrix file:\n") #name the filename that user want to store their key matrices in
    
    for word in text:
        WORD=[]
        
        for letters in word:
            ROW_W = []
            letters = letters.upper()
            ROW_W.append(W_to_N[letters])
            WORD.append(ROW_W)

        WORD_MATRIX = np.array(WORD)
        
        if len(word) in Key_Matrices:#check if key matrix is already generated
            KEY_MATRIX = np.array(Key_Matrices[len(word)])
        else:
            KEY_MATRIX = KMatrix_Generator(len(word))

        Encryption_Matrix = np.dot(KEY_MATRIX, WORD_MATRIX)
        
        for num in Encryption_Matrix:
            Divisor_E = int(num)//26
            Simplest_Num_E = int(num)-Divisor_E*26
            Encryption_result += N_to_W[Simplest_Num_E]
        Encryption_result += ' '

    with open(f"{file_name}.txt", 'w') as file: #Store matrices into txt file
        file.write(json.dumps(Key_Matrices))
    print('Your encrypted text is ' + '"' + Encryption_result + '"')

def Decrypt():
      ROW_EW=[]
      WORD_E=[]
      Decryption_result=''
      y=0
      #
      outcome=input("Do you generate a key previously? [Yes/No]")
      if outcome=="Yes" or "YES" or "yes":
          key_file=input("Please key in the name of the key file:\n")
          with open(key_file) as file:
              the_key=file.read()
              KEY_MATRIX=Read(the_key[0])
              print(KEY_MATRIX)
              DET_MATRIX=Det(KEY_MATRIX)
      if outcome=="No" or "NO" or "no":
          result=input("Do you prefer auto-generated key (1) or manual key(2)? Please key in 1 or 2. ")
          if result==1:
                KEY_MATRIX = KMatrix_Generator(len(word))
                DET_MATRIX=Det(KEY_MATRIX)
          else: 
              K_d=input('Please enter the key matrix (e.g. 1,2;5,6):')
              KEY_MATRIX=Read(K_d)
              DET_MATRIX=Det(KEY_MATRIX)        
        #det
      while y < 26:
            res= (y * int(DET_MATRIX)) % 26
            if res == 1:
                  Multiplicative_inverse_modulo=y
                  break
            else:
                  y+=1
                  if y==26:
                        return(DET_MATRIX, ' has no multiplicative inverse modulo under mod 26.')
      INV_MATRIX=Inv(KEY_MATRIX)    #inverse
      Adjugate_MATRIX=DET_MATRIX *INV_MATRIX % 26   #Adjugate
      Adjugate_MATRIX=np.around(Adjugate_MATRIX)           #int
      RESULT_MATRIX=Multiplicative_inverse_modulo * Adjugate_MATRIX % 26      #final key

      Encrypted_WORD=input('Please enter the word you want to decrypt:')
      for item in Encrypted_WORD:
            ROW_EW.append(W_to_N[item])
            WORD_E.append(ROW_EW)
            ROW_EW=[]
      WORD_E_MATRIX=np.array(WORD_E)   #The matrix corresponding to the encrypted words

      Decryption_Matrix=np.dot(RESULT_MATRIX, WORD_E_MATRIX)
      for num in Decryption_Matrix:
            Divisor_D=int(num)//26
            Simplest_Num_D=int(num)-Divisor_D*26
            Decryption_result+=N_to_W[Simplest_Num_D]
      print('Your decrypted word is ' + '"' + Decryption_result + '"')
      
User_Input = input('If you want to encrypt the content, please enter "Encrypt" \nIf you want to decrypt the content, please enter "Decrypt"\n')
if User_Input == "Encrypt":
    Encrypt()
elif User_Input == "Decrypt":
    Decrypt()


